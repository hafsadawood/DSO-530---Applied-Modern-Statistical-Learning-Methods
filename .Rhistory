library(tidyverse)
library(readxl)
library(dplyr)
library(data.table)
library(ggplot2)
library(tidyr)
ny_data = fread("NY property 1 million.csv", sep = ",")
owner = ny_data %>%
select(OWNER)
pull(ny_data, OWNER)
strings <- c(
"apple",
"219 733 8965",
"329-293-8753",
"Work: 579-499-7527; Home: 543.355.3679"
)
owner = pull(ny_data, OWNER)
johnsmith = c("j*smith", "smith*j")
str_subset(tolower(owner), regex("john*smith"))
str_subset(tolower(owner), regex("^j+[a-z0-9 ,.!@#$%^&*)
('][s]+[m]+[i]+[t]+[h]+"))
owner = pull(ny_data, OWNER)
ny_data = fread("NY property 1 million.csv", sep = ",")
owner = ny_data %>%
select(OWNER)
pull(ny_data, OWNER)
strings <- c(
"apple",
"219 733 8965",
"329-293-8753",
"Work: 579-499-7527; Home: 543.355.3679"
)
owner = pull(ny_data, OWNER)
johnsmith = c("j*smith", "smith*j")
str_subset(tolower(owner), regex("john*smith"))
owner = ny_data %>%
select(OWNER)
ny_data = fread("NY property 1 million.csv", sep = ",")
ny_data = fread("NY property 1 million.csv", sep = ",")
setwd("D:/USC Classes/Spring 2018/DSO 530 Machine Learning/530 Workspace")
setwd("D:/USC Classes/Spring 2018/DSO 530 Machine Learning/530 Workspace")
?lm
library(ISLR)
data(Auto)
linear_reg <- lm(mpg ~ horsepower, data = Auto)
summary(linear_reg)
install.packages("ISLR")
library(ISLR)
data(Auto)
linear_reg <- lm(mpg ~ horsepower, data = Auto)
summary(linear_reg)
predict(fit, data.frame(horsepower = 98), interval = "confidence")
predict(linear_reg, data.frame(horsepower = 98), interval = "confidence")
library(dplyr)
library(ggplot)
library(dplyr)
library(ggplot2)
data %>%
ggplot(horsepower, mpg)
data = Auto
data %>%
ggplot(horsepower, mpg)
data %>%
ggplot(aes(x=horsepower, y=mpg))+
geom_point()
data %>%
ggplot(aes(x=horsepower, y=mpg))+
geom_point(col = "blue")
data %>%
ggplot(aes(x=horsepower, y=mpg))+
geom_point(col = "blue")+
abline(linear_reg, col = "red")
data %>%
ggplot(aes(x=horsepower, y=mpg))+
geom_point(col = "blue")+
geom_abline(linear_reg, col = "red")
glm.fit1 = glm(default ~ balance, data= Default, family='binomial')
glm.prob1 = predict(glm.fit1, type = 'response')
glm.predict1 = ifelse(glm.prob1 > 0.5, 'Yes', 'No')
table(glm.predict1, default)
glm.prob1 = predict(glm.fit1, type = 'response')
glm.predict1 = ifelse(glm.prob1 > 0.5, 'Yes', 'No')
table(glm.predict1, Default)
glm.prob1 = predict(glm.fit1, type = 'response')
glm.predict1 = ifelse(glm.prob1 > 0.5, 'Yes', 'No')
table(glm.predict1, default)
glm.predict1
table(glm.predict1, default)
library(dplyr)
library(ggplot2)
data = Auto
data %>%
ggplot(aes(x=horsepower, y=mpg))+
geom_point(col = "blue")+
geom_abline(aes(linear_reg))
data %>%
ggplot(aes(x=horsepower, y=mpg))+
geom_point(col = "blue")
data = Auto
plot(data$horsepower, data$mpg, main = "Scatterplot of mpg vs. horsepower",
xlab = "horsepower", ylab = "mpg", col ="blue")
abline(fit, col = "red")
abline(fit, col = "red")
abline(linear_reg, col = "red")
plot(data$horsepower, data$mpg, main = "Scatterplot of mpg vs. horsepower",
xlab = "horsepower", ylab = "mpg", fill ="blue")
abline(linear_reg, col = "red")
plot(data$horsepower, data$mpg, main = "Scatterplot of mpg vs. horsepower",
xlab = "horsepower", ylab = "mpg", col ="blue")
abline(linear_reg, col = "red")
par(mfrow = c(2, 2))
plot(linear_reg)
data = Auto
pairs(data)
str(data)
cor(data[1:8])
linear_reg2 = lm(mpg ~ . - name, data = data)
summary(linear_reg2)
par(mfrow = c(2, 2))
plot(linear_reg2)
linear_reg3 <- lm(mpg ~ cylinders * displacement+displacement * weight, data = Auto[, 1:8])
summary(linear_reg3)
plot(log(data$horsepower), data$mpg)
plot(sqrt(data$horsepower), data$mpg)
plot((data$horsepower)^2, data$mpg)
data2 = Carseats
linear_reg4 = lm(Sales ~ Price + Urban + US, data = data2)
summary(linear_reg4)
data2 = Carseats
data(Carseats)
library(ISLR)
data2 = Carseats
linear_reg4 = lm(Sales ~ Price + Urban + US, data = data2)
summary(linear_reg4)
linear_reg5 = lm(Sales ~ Price + US, data = data2)
summary(linear_reg5)
summary(linear_reg4)
confint(linear_reg4)
confint(linear_reg5)
plot(linear_reg5)
par(mfrow = c(2, 2))
plot(linear_reg5)
library(ISLR)
data = Auto
linear_reg1 <- lm(mpg ~ horsepower, data = data)
summary(linear_reg1)
predict(linear_reg1, data.frame(horsepower = 98), interval = "confidence")
plot(data$horsepower, data$mpg, main = "Scatterplot of mpg vs. horsepower",
xlab = "horsepower", ylab = "mpg", col ="blue")
abline(linear_reg1, col = "red")
library(ISLR)
data = Auto
linear_reg1 <- lm(mpg ~ horsepower, data = data)
summary(linear_reg1)
mean(data$mpg)
library(ISLR)
data = Auto
pairs(data)
linear_reg3 <- lm(mpg ~ cylinders * displacement+displacement * weight, data = data[, 1:8])
summary(linear_reg3)
plot(linear_reg1)
plot(linear_reg2)
linear_reg2 = lm(mpg ~ . - name, data = data)
summary(linear_reg2)
par(mfrow = c(2, 2))
plot(linear_reg2)
plot(log(data$horsepower), data$mpg)
plot(sqrt(data$horsepower), data$mpg)
plot((data$horsepower)^2, data$mpg)
plot(data$horsepower, data$mpg, main = "Scatterplot of mpg vs. Horsepower",
xlab = "horsepower", ylab = "mpg", col ="blue")
abline(linear_reg1, col = "red")
plot(log(data$horsepower), data$mpg)
plot(log(data$horsepower), data$mpg,
main = "Plot of Log(Horsepower) vs. mpg", xlab = "Log(Horsepower)", ylab = "mpg")
plot(sqrt(data$horsepower), data$mpg,
main = "Plot of Sqrt(Horsepower) vs. mpg", xlab = "Sqrt(Horsepower)", ylab = "mpg")
plot((data$horsepower)^2, data$mpg)
plot((data$horsepower)^2, data$mpg,
main = "Plot of Square(Horsepower) vs. mpg", xlab = "Square(Horsepower)", ylab = "mpg")
library(knitr)
kable(mtcars[1:5, ], caption = "A knitr kable.")
install.packages(pander)
require(pander)
rse(linear_reg1)
mse(linear_reg1)
install.packages("lme4")
library(lme4)
rse(linear_reg1)
mse(linear_reg1)
rse(linear_reg1)
summary(linear_reg1)
str(summary(linear_reg1))
sigma(linear_reg1)
summary(linear_reg1)
sigma(linear_reg1)/mean(data$mpg)
plot(log(data$horsepower), data$mpg,
main = "Plot of Log(Horsepower) vs. mpg", xlab = "Log(Horsepower)", ylab = "mpg")
abline(lm(mpg ~ log(horsepower), data = data))
abline(lm(mpg ~ log(horsepower), data = data, color = red))
abline(lm(mpg ~ log(horsepower), data = data, color = "red"))
abline(lm(mpg ~ log(horsepower), data = data), color = "red")
abline(lm(mpg ~ log(horsepower), data = data), col = "red")
plot(log(data$horsepower), data$mpg,
main = "Plot of Log(Horsepower) vs. mpg", xlab = "Log(Horsepower)", ylab = "mpg")
abline(lm(mpg ~ log(horsepower), data = data), col = "red")
plot(sqrt(data$horsepower), data$mpg,
main = "Plot of Sqrt(Horsepower) vs. mpg", xlab = "Sqrt(Horsepower)", ylab = "mpg")
abline(lm(mpg ~ sqrt(horsepower), data = data), col = "red")
plot((data$horsepower)^2, data$mpg,
main = "Plot of Square(Horsepower) vs. mpg", xlab = "Square(Horsepower)", ylab = "mpg")
abline(lm(mpg ~ (horsepower)^2, data = data), col = "red")
linear_reg3.1 <- lm(mpg~.*.-name*.+.-name,data=data)
summary(linear_reg3.1)
linear_reg5 = lm(Sales ~ Price + US, data = data2)
library(ISLR)
data2 = Carseats
linear_reg4 = lm(Sales ~ Price + Urban + US, data = data2)
summary(linear_reg4)
linear_reg5 = lm(Sales ~ Price + US, data = data2)
summary(linear_reg5)
plot(linear_reg5)
plot(linear_reg5)
par(mfrow = c(2, 2))
plot(linear_reg5)
mean(Price)/sigma(linear_reg5)
sigma(linear_reg5)/mean(data$Price)
sigma(linear_reg5)/mean(data2$Price)
sigma(linear_reg5)/mean(data2$Sales)
summary(linear_reg4)
summary(linear_reg5)
